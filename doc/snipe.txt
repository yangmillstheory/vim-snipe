*snipe.txt*  Fast linewise motions and edits
            _                                                      ~
  ___ _ __ (_)_ __   ___                                           ~
 / __| '_ \| | '_ \ / _ \                                          ~
 \__ \ | | | | |_) |  __/                                          ~
 |___/_| |_|_| .__/ \___|                                          ~
             |_|                                                   ~

Author:  Victor Alvarez <v.alvarez312@gmail.com>
Source:  https://www.github.com/yangmillstheory/vim-snipe
License: MIT (see |snipe-license|)

====================================================================
CONTENTS                                                   *snipe-toc*

  1. Motivation .......................................... |snipe-why|
  2. Usage ............................................. |snipe-usage|
  3. Configuration .................................... |snipe-config|
  4. Character motions .......................... |snipe-char-motions|
  5. Word motions ............................... |snipe-word-motions|
  6. Editing ......................................... |snipe-editing|
  7. License ......................................... |snipe-license|
  8. Contributing .................................... |snipe-contrib|

====================================================================
MOTIVATION                                                 *snipe-why*

This plugin aims to fix two problems.

--------------------------------------------------------------------
Repetitive linewise motions

You almost always know where you want to go, but you're forced to
navigate incrementally to that place.

--------------------------------------------------------------------
Fixing typos

I make mistakes often enough to make this worth automating - in
fact, I made a few mistakes while writing this line.

--------------------------------------------------------------------

For more, see https://blog.yangmillstheory.com/posts/vim-snipe#motivation.

====================================================================
USAGE                                                    *snipe-usage*

Provide mappings to named key sequences, see |snipe-char-motions|,
|snipe-word-motions|, and |snipe-editing|.

For reasons why the plugin API is exposed in this way, see

    http://whileimautomaton.net/2008/09/27022735

Triggering a mapping will highlight possible jump targets, so you
can get to where you're going with a single keystroke and minimal
cognitive load.

====================================================================
CONFIGURATION                                           *snipe-config*

--------------------------------------------------------------------
                                                *g:snipe_jump_tokens*

By default, the jump tokens are ordered starting with the home row
{asdfghjkl}, then {qwertyuiop}, then {zxcvbnm}. You can provide your
own sequence by setting a global variable `g:snipe_jump_tokens`. For
Dvorak users, e.g.
>
    let g:snipe_jump_tokens = 'aoeuidhtns'
<

                                               *g:snipe_float_window*
By default, if |nvim_open_win| is detected, the neovim floating window
will be used to display the jump tokens. You can disable this feature
by setting a global variable, e.g.
>
    let g:snipe_float_window = 0
<
--------------------------------------------------------------------
                                         *g:snipe_highlight_gui_color*
                                    *g:snipe_highlight_cterm256_color*
                                       *g:snipe_highlight_cterm_color*

The jump tokens are highlighted in a configurable color. The
default colors are #fabd2f for gui mode and 7 (light grey). To
override these values, specify the the variables (for gui mode and
terminal mode respectively):
>
    let g:snipe_highlight_gui_color      = '#dfffaf'
    let g:snipe_highlight_cterm256_color = 'blue'
    let g:snipe_highlight_cterm_color    = 'red'
<
====================================================================
CHARACTER MOTIONS                                 *snipe-char-motions*

Use in Visual, Normal, or Operator-pending mode.

|snipe-f|    |snipe-t|
|snipe-F|    |snipe-T|

Example mappings provided below.

--------------------------------------------------------------------
*snipe-f*

Jump forward to a token.
>
  map <leader><leader>f <Plug>(snipe-f)
<
--------------------------------------------------------------------
*snipe-F*

Jump backward to a token.
>
  map <leader><leader>F <Plug>(snipe-F)

--------------------------------------------------------------------
*snipe-t*

Jump forward until a token.
>
  map <leader><leader>t <Plug>(snipe-t)

--------------------------------------------------------------------
*snipe-T*

Jump backward until a token.
>
  map <leader><leader>F <Plug>(snipe-T)

====================================================================
WORD MOTIONS                                      *snipe-word-motions*

Use in Visual, Normal, or Operator-pending mode.

|snipe-w|    |snipe-b|
|snipe-W|    |snipe-B|
|snipe-e|    |snipe-ge|
|snipe-E|    |snipe-gE|

Example mappings provided below.

--------------------------------------------------------------------
*snipe-w*

Jump forward to a <word>.
>
  map <leader><leader>w <Plug>(snipe-w)
<
--------------------------------------------------------------------
*snipe-W*

Jump forward to a <WORD>.
>
  map <leader><leader>W <Plug>(snipe-W)
<
--------------------------------------------------------------------
*snipe-e*

Jump forward to the end of a <word>.
>
  map <leader><leader>e <Plug>(snipe-e)

--------------------------------------------------------------------
*snipe-E*

Jump forward to the end of a <WORD>.
>
  map <leader><leader>E <Plug>(snipe-E)

--------------------------------------------------------------------
*snipe-b*

Jump backward to the start of a <word>.
>
  map <leader><leader>b <Plug>(snipe-b)

--------------------------------------------------------------------
*snipe-B*

Jump backward to the start of a <WORD>.
>
  map <leader><leader>B <Plug>(snipe-B)

--------------------------------------------------------------------
*snipe-ge*

Jump backward to the end of a <word>.
>
  map <leader><leader>ge <Plug>(snipe-ge)

--------------------------------------------------------------------
*snipe-gE*

Jump backward to the end of a <WORD>.
>
  map <leader><leader>gE <Plug>(snipe-gE)

====================================================================
EDITING                                                *snipe-editing*

Use in Normal mode.

|snipe-f-xp|    |snipe-f-x|    |snipe-f-r|      |snipe-f-i|     |snipe-f-a|
|snipe-F-xp|    |snipe-F-x|    |snipe-F-r|      |snipe-F-i|     |snipe-F-a|

Example mappings provided below.

--------------------------------------------------------------------
*snipe-f-xp*

Swap a token ahead of the cursor.
>
  map <leader><leader>] <Plug>(snipe-f-xp)

--------------------------------------------------------------------
*snipe-F-xp*

Swap a token behind the cursor.
>
  map <leader><leader>[ <Plug>(snipe-F-xp)

--------------------------------------------------------------------
*snipe-f-x*

Cut a token ahead of the cursor into the Black hole register.
>
  map <leader><leader>x <Plug>(snipe-f-x)

--------------------------------------------------------------------
*snipe-F-x*

Cut a token behind the cursor into the Black hole register.
>
  map <leader><leader>X <Plug>(snipe-F-x)

--------------------------------------------------------------------
*snipe-f-r*

Replace a token ahead of the cursor.
>
  map <leader><leader>r <Plug>(snipe-f-r)

--------------------------------------------------------------------
*snipe-F-r*

Replace a token behind the cursor.
>
  map <leader><leader>R <Plug>(snipe-F-r)

--------------------------------------------------------------------
*snipe-f-i*

Insert a token ahead of the cursor.
>
  map <leader><leader>i <Plug>(snipe-f-i)

--------------------------------------------------------------------
*snipe-F-i*

Insert a token behind the cursor.
>
  map <leader><leader>I <Plug>(snipe-F-i)
--------------------------------------------------------------------
*snipe-f-a*

Append a token ahead of the cursor.
>
  map <leader><leader>a <Plug>(snipe-f-a)

--------------------------------------------------------------------
*snipe-F-a*

Append a token behind the cursor.
>
  map <leader><leader>A <Plug>(snipe-F-a)

====================================================================
LICENSE                                                *snipe-license*

Copyright 2017 Victor Alvarez

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation files
(the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge,
publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

====================================================================
CONTRIBUTING                                           *snipe-contrib*

Fork https://www.github.com/yangmillstheory/vim-snipe.

Pull requests are welcome; no special process is required.

" vim:tw=78:ts=8:ft=help:norl:
